from random import randint #=> импортируем метод randint из модуля random библиотеки python
                           #=> метод randint возвращает случайное целочисленное значение между двумя нижними
                           # и верхними пределами (включая оба ограничения)

class Animal: #=> создаем родительский класс (Animal - животные)
    live = True #=> определяем атрибут (live - живёт) класса Animal и присваиваем ему значение True
    sound = None #=> определяем атрибут (sound - звук) класса Animal и присваиваем ему значение None
    _DEGREE_OF_DANGER = 0 #=> определяем атрибут (_DEGREE_OF_DANGER - степень опасности существа) класса Animal
                          # и присваиваем ему значение 0

    def __init__(self, speed: int): #=> создаем метод создания объектов внутри класса Animal
        self._cords = [0, 0, 0] #=> определяем атрибут объекта внутри класса Animal (_cords - координаты в пространстве)
                                # в виде списка с начальными значениями [0, 0, 0]
        self.speed = speed #=> определяем атрибут объекта внутри класса Animal (speed - скорость передвижения существа),
                           # значение данного атрибута определяется при создании объекта

    def move(self, dx: int, dy: int, dz: int): #=> создаем метод внутри класса Animal, который будет вычислять координаты существа
        if self._cords[2] + dz * self.speed < 0: #=> здесь проверяется условие выполнения условия задачи
            print("It's too deep, i can't dive :(") #=> выводится на консоль сообщение "Слишком глубоко, я не могу нырнуть"
        else:
            self._cords[0] += dx * self.speed #=> пересчитывается занчение атрибута _cords,
                                              # т.е. вычисляется координата существа по оси х
            self._cords[1] += dy * self.speed
            self._cords[2] += dz * self.speed

    def get_cords(self): #=> создаем метод внутри класса Animal, который будет выводить на консоль текущие координаты существа
        print(f"X: {self._cords[0]}, Y: {self._cords[1]}, Z: {self._cords[2]}")

    def attack(self): #=> создаем метод внутри класса Animal, который будет выводить сообщение, в зависимости от условий
        if self._DEGREE_OF_DANGER < 5: #=> проверяется условие
            print("Sorry, i'm peaceful :)") #=> выводится на консоль сообщение: "Извините, я миролюбивый :)"
        elif self._DEGREE_OF_DANGER >= 5: #=> проверяется условие
            print("Be careful, i'm attacking you O_O") #=> выводится на консоль сообщение: "Будь осторожен, я нападаю на тебя О_О"

    def speak(self): #=> создаем метод внутри класса Animal, который будет выводить строку
        print(self.sound) #=> выводится на консоль имитация звука, издаваемая животным

class Bird(Animal): #=> создаем дочерний класс (Bird - птицы)
    beak = True #=> определяем атрибут (beak - клюв) класса Bird и присваиваем ему значение True

    def lay_eggs(self): #=> создаем метод внутри класса Bird, который будет создавать сообщение о количестве принесенных существом яиц
        print(f"Here are(is) {randint(1, 4)} eggs for you") #=> вывод на консоль "Вот вам 'случайное количество' яиц"

class AquaticAnimal(Animal): #=> создаем дочерний класс (AquaticAnimal - плавающие животные)
    _DEGREE_OF_DANGER = 3 #=> переопределяем атрибут (_DEGREE_OF_DANGER - степень опасности существа) класса Animal
                          # и присваиваем ему значение 3

    def dive_in(self, dz: int): #=> создаем метод внутри класса AquaticAnimal, который будет специально пересчитывать координату z
        self._cords[2] -= int(abs(dz) * (self.speed / 2)) #=> пересчитывается занчение атрибута _cords,
                                                          # т.е. вычисляется новая координата существа по оси z

class PoisonousAnimal(Animal): #=> создаем дочерний класс (PoisonousAnimal - ядовитые животные)
    _DEGREE_OF_DANGER = 8 #=> переопределяем атрибут (_DEGREE_OF_DANGER - степень опасности существа) класса Animal
                          # и присваиваем ему значение 8

class Duckbill(Bird, PoisonousAnimal, AquaticAnimal): #=> создаем дочерний класс (Duckbill - утконос), данный класс
                                                      # наследуется от дочерних классов: Bird, AquaticAnimal, PoisonousAnimal
    sound = "Click-click-click" #=> переопределяем атрибут (sound - звук) класса Duckbill и присваиваем ему значение "Click-click-click"


# Код для проверки работы классов:
db = Duckbill(10) #=> создаем объект и задаем скорость передвижения этого объекта (10)

print(db.live) #=> живой - да (True)
print(db.beak) #=> есть клюв - да (True)

db.speak() #=> запуск метода имитации звуков животного
db.attack() #=> запуск метода атаки животного

db.move(1, 2, 3) #=> запуск метода вычисления координат животного по его скорости и заданным значениям
                             # атрибутов этого метода (перемещениям по осям координат)
db.get_cords() #=> запуск метода вывода значений координат
db.dive_in(6) #=> запуск метода из дочернего класса AquaticAnimal для пересчета координаты по оси z
db.get_cords() #=> запуск метода вывода значений координат

db.lay_eggs() #=> запуск метода из дочернего класса Bird для получения случайного числа принесенных яиц
def personal_sum(numbers): #=> объявляем функцию personal_sum с параметром numbers для подсчета суммы чисел
    result = 0 #=> вводим переменную result и присваиваем ей изначальное значение ноль
    incorrect_data = 0 #=> вводим переменную incorrect_data и присваиваем ей изначальное значение ноль
    for i in numbers: #=> открываем цикл для перебора значений i
        try: #=> открываем блок try для проверки кода на возможные ошибки
            result += i #=> выполняем условие задания по подсчету суммы чисел
        except TypeError as exc: #=> открываем блок except, который будет исполняться
                                 # в случае возникновения ошибки TypeError в блоке try
            incorrect_data += 1 #=> ведем подсчет исключений (ощибок) в соответствии с условием задания
            print(f'Некорректный тип данных для подсчёта суммы - {i}') #=> вывод сообщения на консоль в блоке except
    return result, incorrect_data #=> возвращение значений переменных: result и incorrect_data

def calculate_average(numbers): #=> объявляем функцию calculate_average с параметром numbers
                                # для подсчета среднеарифметического всех чисел
    try: #=> открываем блок try для проверки кода на возможные ошибки
        total = personal_sum(numbers) #=> здесь запускается функция personal_sum
        return total[0] / (len(numbers) - total[1]) #=> здесь возвращается значение функции calculate_average
                                                    # и ведется подсчет среднеарифметического значения в соответствии с заданием
    except ZeroDivisionError: #=> #=> открываем блок except, который будет исполняться
                                 # в случае возникновения ошибки ZeroDivisionError в блоке try
        return 0 #=> возвращается значение 0, в соответствии с заданием
    except TypeError: #=> #=> открываем блок except, который будет исполняться
                          # в случае возникновения ошибки TypeError в блоке try
        print('В numbers записан некорректный тип данных') #=> вывод на консоль, в соответствии с заданием

# Вывод на консоль:
print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать